!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).dotenvCache=n()}(this,(function(){"use strict";var e={};const n=/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/,t=/\\n/g,o=/\r\n|\n|\r/;var r=function(e,r){const c=Boolean(r&&r.debug),l={};return e.toString().split(o).forEach((function(e,o){const r=e.match(n);if(null!=r){const e=r[1];let n=r[2]||"";const o=n.length-1,c='"'===n[0]&&'"'===n[o];"'"===n[0]&&"'"===n[o]||c?(n=n.substring(1,o),c&&(n=n.replace(t,"\n"))):n=n.trim(),l[e]=n}else c&&(s=`did not match key and value when parsing line ${o+1}: ${e}`,console.log(`[dotenv][DEBUG] ${s}`));var s})),l};const c={};return{envCache:c,config:n=>{let t=e.resolve(process.cwd(),".env"),o="utf8",l=!1;var s;n&&(null!=n.path&&(t="~"===(s=n.path)[0]?e.join(e.homedir(),s.slice(1)):s),null!=n.encoding&&(o=n.encoding),null!=n.debug&&(l=!0));try{const n=r(e.readFileSync(t,{encoding:o}),{debug:l});return Object.keys(n).forEach((function(e){c[e]=n[e]})),{parsed:n}}catch(i){return{error:i}}},get:e=>Object.prototype.hasOwnProperty.call(c,e)?c[e]:null,set:(e,n)=>{try{return c[e]=n,!0}catch(t){return!1}}}}));
